//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Blocks

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct AbstractOperation;

struct Arena;

struct CGAffineTransform {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
    double _field5;
    double _field6;
};

struct CGPoint {
    double x;
    double y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    double width;
    double height;
};

struct Message {
    CDUnknownFunctionPointerType *_field1;
};

struct Rep;

struct RepeatedField<unsigned int> {
    int _field1;
    int _field2;
    union Pointer _field3;
};

struct RepeatedField<unsigned long long> {
    int _field1;
    int _field2;
    union Pointer _field3;
};

struct RepeatedPtrField<TSP::UUID> {
    struct Arena *_field1;
    int _field2;
    int _field3;
    struct Rep *_field4;
};

struct UIEdgeInsets {
    double _field1;
    double _field2;
    double _field3;
    double _field4;
};

struct UUIDData<TSP::UUIDData>;

struct _NSRange {
    unsigned long long _field1;
    unsigned long long _field2;
};

struct _opaque_pthread_t {
    long long _field1;
    struct __darwin_pthread_handler_rec *_field2;
    char _field3[8176];
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct shared_ptr<TSKCO::AbstractOperation> {
    struct AbstractOperation *_field1;
    struct __shared_weak_count *_field2;
};

struct vector<TSKOperationPropertyId, std::__1::allocator<TSKOperationPropertyId>> {
    unsigned short *_field1;
    unsigned short *_field2;
    struct __compressed_pair<TSKOperationPropertyId *, std::__1::allocator<TSKOperationPropertyId>> {
        unsigned short *_field1;
    } _field3;
};

struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData>>> {
    struct UUIDData<TSP::UUIDData> *__begin_;
    struct UUIDData<TSP::UUIDData> *__end_;
    struct __compressed_pair<TSU::UUIDData<TSP::UUIDData>*, std::__1::allocator<TSU::UUIDData<TSP::UUIDData>>> {
        struct UUIDData<TSP::UUIDData> *__value_;
    } __end_cap_;
};

struct vector<_NSRange, std::__1::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> {
        struct _NSRange *__value_;
    } __end_cap_;
};

struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    unsigned int useCount;
    id ticket;
} CDStruct_2a021fcd;

typedef struct {
    unsigned short id;
    _Bool firstOneWin;
    _Bool hasDescendantProperties;
    unsigned short path[6];
} CDStruct_1464e8ba;

typedef struct {
    long long _field1;
    int _field2;
    unsigned int _field3;
    long long _field4;
} CDStruct_198678f7;

typedef struct {
    long long majorVersion;
    long long minorVersion;
    long long patchVersion;
} CDStruct_f6aba300;

typedef struct {
    int _field1;
    union {
        struct {
            unsigned int :16;
            unsigned int :8;
            unsigned int :3;
            unsigned int :1;
            unsigned int :1;
        } _field1;
        struct {
            unsigned int :8;
        } _field2;
        struct {
            unsigned int :8;
            unsigned int :8;
            unsigned int :1;
        } _field3;
        struct {
            unsigned int :1;
            unsigned int :1;
            id _field1;
        } _field4;
        struct {
            unsigned int :1;
            int _field1;
            int _field2;
            int _field3;
        } _field5;
        struct {
            id _field1;
            id _field2;
            unsigned int _field3;
            unsigned char _field4;
        } _field6;
    } _field2;
} CDStruct_cf9a5aa8;

// Template types
typedef struct RepeatedField<unsigned int> {
    int _field1;
    int _field2;
    union Pointer _field3;
} RepeatedField_b20a0771;

typedef struct RepeatedField<unsigned long long> {
    int _field1;
    int _field2;
    union Pointer _field3;
} RepeatedField_88f7bd5c;

typedef struct RepeatedPtrField<TSP::UUID> {
    struct Arena *_field1;
    int _field2;
    int _field3;
    struct Rep *_field4;
} RepeatedPtrField_c4607516;

typedef struct shared_ptr<TSKCO::AbstractOperation> {
    struct AbstractOperation *_field1;
    struct __shared_weak_count *_field2;
} shared_ptr_f167ad79;

typedef struct vector<TSKOperationPropertyId, std::__1::allocator<TSKOperationPropertyId>> {
    unsigned short *_field1;
    unsigned short *_field2;
    struct __compressed_pair<TSKOperationPropertyId *, std::__1::allocator<TSKOperationPropertyId>> {
        unsigned short *_field1;
    } _field3;
} vector_941b75ab;

typedef struct vector<TSU::UUIDData<TSP::UUIDData>, std::__1::allocator<TSU::UUIDData<TSP::UUIDData>>> {
    struct UUIDData<TSP::UUIDData> *__begin_;
    struct UUIDData<TSP::UUIDData> *__end_;
    struct __compressed_pair<TSU::UUIDData<TSP::UUIDData>*, std::__1::allocator<TSU::UUIDData<TSP::UUIDData>>> {
        struct UUIDData<TSP::UUIDData> *__value_;
    } __end_cap_;
} vector_4dc5f307;

typedef struct vector<_NSRange, std::__1::allocator<_NSRange>> {
    struct _NSRange *__begin_;
    struct _NSRange *__end_;
    struct __compressed_pair<_NSRange *, std::__1::allocator<_NSRange>> {
        struct _NSRange *__value_;
    } __end_cap_;
} vector_b5e32e34;

typedef struct vector<unsigned int, std::__1::allocator<unsigned int>> {
    unsigned int *__begin_;
    unsigned int *__end_;
    struct __compressed_pair<unsigned int *, std::__1::allocator<unsigned int>> {
        unsigned int *__value_;
    } __end_cap_;
} vector_12da65de;

#pragma mark Named Unions

union Pointer {
    struct Arena *_field1;
    struct Rep *_field2;
};

