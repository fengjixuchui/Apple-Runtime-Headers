//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <SpriteKit/SKNode.h>

@class NSDictionary, SKAction, SKKeyframeSequence, SKShader, SKTexture, UIColor;

@interface SKEmitterNode : SKNode
{
    SKTexture *_particleTexture;
    // Error parsing type: ^{SKCEmitterNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}BB@@@^{SKCParticleSystemNode}^{SKCParticleSystem}fB^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}^{SKCKeyframeSequence}IIiidddd{CGSize=ff}fffff{?=ffff}{?=ffff}{?=ffff}fff{list<PKPoint, std::__1::allocator<PKPoint> >={__list_node_base<PKPoint, void *>=^{__list_node_base<PKPoint, void *>}^{__list_node_base<PKPoint, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<PKPoint, void *> > >=L}}{?=ff}{?=ff}ffff{?=ff}ffffffffffff@iIIIBB^{SKCEmitterNode}{list<SKCEmitterNode *, std::__1::allocator<SKCEmitterNode *> >={__list_node_base<SKCEmitterNode *, void *>=^{__list_node_base<SKCEmitterNode *, void *>}^{__list_node_base<SKCEmitterNode *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCEmitterNode *, void *> > >=L}}}, name: _skcEmitterNode
    SKNode *_target;
    SKKeyframeSequence *_colorSequence;
    SKKeyframeSequence *_colorBlendSequence;
    SKKeyframeSequence *_alphaSequence;
    SKKeyframeSequence *_scaleSequence;
    SKKeyframeSequence *_rotationSequence;
    SKKeyframeSequence *_fieldInfluenceSequence;
    SKKeyframeSequence *_particleSpeedSequence;
    unsigned int _particleRenderOrder;
}

+ (id)debugHierarchyValueForPropertyWithName:(id)arg1 onObject:(id)arg2 outOptions:(id *)arg3 outError:(id *)arg4;
+ (id)debugHierarchyPropertyDescriptions;
+ (_Bool)supportsSecureCoding;
- (void).cxx_destruct;
@property(nonatomic) unsigned int particleRenderOrder; // @synthesize particleRenderOrder=_particleRenderOrder;
- (void)setValue:(id)arg1 forAttributeNamed:(id)arg2;
- (id)valueForAttributeNamed:(id)arg1;
- (void)dealloc;
@property(retain, nonatomic) SKShader *shader;
- (void)advanceSimulationTime:(double)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)copyParticlePropertiesToNode:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)initWithCoder:(id)arg1;
- (id)initWithMinimumParticleCapacity:(unsigned int)arg1 minimumPositionBufferCapacity:(unsigned int)arg2;
- (id)initWithMinimumParticleCapacity:(unsigned int)arg1;
- (id)init;
- (void)commonInit;
@property(nonatomic) unsigned int fieldBitMask;
- (void)resetSimulation;
@property(nonatomic) unsigned int numParticlesToEmit;
@property(copy, nonatomic) SKAction *particleAction;
@property(nonatomic) int particleBlendMode;
@property(retain, nonatomic) SKTexture *particleTexture;
@property(nonatomic) float emissionAngleRange;
@property(nonatomic) float emissionAngle;
@property(nonatomic) float particleSpeedRange;
@property(nonatomic) float particleSpeed;
@property(nonatomic) float particleAlphaSpeed;
@property(nonatomic) float particleAlphaRange;
@property(nonatomic) float particleAlpha;
@property(nonatomic) float particleScaleSpeed;
@property(nonatomic) float particleScaleRange;
@property(nonatomic) float particleScale;
@property(nonatomic) float particleRotationSpeed;
@property(nonatomic) float particleRotationRange;
@property(nonatomic) float particleRotation;
@property(nonatomic) float particleLifetimeRange;
@property(nonatomic) float particleLifetime;
@property(nonatomic) float particleColorBlendFactorSpeed;
@property(nonatomic) float particleColorBlendFactorRange;
@property(nonatomic) float particleColorBlendFactor;
@property(nonatomic) float particleBirthRate;
@property(nonatomic) float yAcceleration;
@property(nonatomic) float xAcceleration;
@property(nonatomic) struct CGVector particlePositionRange;
@property(nonatomic) struct CGPoint particlePosition;
@property(nonatomic) float particleColorAlphaSpeed;
@property(nonatomic) float particleColorBlueSpeed;
@property(nonatomic) float particleColorGreenSpeed;
@property(nonatomic) float particleColorRedSpeed;
@property(nonatomic) float particleColorAlphaRange;
@property(nonatomic) float particleColorBlueRange;
@property(nonatomic) float particleColorGreenRange;
@property(nonatomic) float particleColorRedRange;
@property(retain, nonatomic) UIColor *particleColor;
@property(nonatomic) float particleZPositionRange;
@property(nonatomic) float particleZPosition;
- (void)setZPosition:(float)arg1;
@property(nonatomic) struct CGSize particleSize;
@property(nonatomic) float particleZPositionSpeed;
@property(nonatomic) __weak SKNode *targetNode;
- (float)particleDensity;
- (void)setParticleDensity:(float)arg1;
- (_Bool)usesPointSprites;
- (void)setUsesPointSprites:(_Bool)arg1;
- (_Bool)densityBased;
- (void)setDensityBased:(_Bool)arg1;
- (_Bool)wantsNewParticles;
- (void)setWantsNewParticles:(_Bool)arg1;
- (float)emissionDistanceRange;
- (void)setEmissionDistanceRange:(float)arg1;
- (float)emissionDistance;
- (void)setEmissionDistance:(float)arg1;
- (id)particleRotationSequence;
- (unsigned int)activeParticleCount;
- (void)setParticleRotationSequence:(id)arg1;
@property(retain, nonatomic) SKKeyframeSequence *particleScaleSequence;
@property(retain, nonatomic) SKKeyframeSequence *particleColorSequence;
@property(retain, nonatomic) SKKeyframeSequence *particleColorBlendFactorSequence;
@property(retain, nonatomic) SKKeyframeSequence *particleAlphaSequence;
- (id)description;
- (void)setPhysicsWorld:(id)arg1;
- (id)physicsWorld;
- (_Bool)isEqualToNode:(id)arg1;
- (void)setParticleSpeedSequence:(id)arg1;
- (id)particleSpeedSequence;
- (void)setFieldInfluenceSequence:(id)arg1;
- (id)fieldInfluenceSequence;
- (id)subEmitterNode;
- (void)addSubEmitterNode:(id)arg1;
- (void)_didMakeBackingNode;
-     // Error parsing type: ^{SKCNode=^^?@B{unordered_map<std::__1::basic_string<char>, SKAttributeValue *, std::__1::hash<std::__1::basic_string<char> >, std::__1::equal_to<std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, SKAttributeValue *> > >={__hash_table<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true>, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true>, std::__1::allocator<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *> > >={unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> > >={__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> **, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> > >=^^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>}{__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> >={__compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *> *> >=L}}}}{__compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> > >={__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>=^{__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, void *> *>}}}{__compressed_pair<unsigned long, std::__1::__unordered_map_hasher<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::hash<std::__1::basic_string<char> >, true> >=L}{__compressed_pair<float, std::__1::__unordered_map_equal<std::__1::basic_string<char>, std::__1::__hash_value_type<std::__1::basic_string<char>, SKAttributeValue *>, std::__1::equal_to<std::__1::basic_string<char> >, true> >=f}}}@@^{SKCNode}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}{vector<SKCNode *, std::__1::allocator<SKCNode *> >=^^{SKCNode}^^{SKCNode}{__compressed_pair<SKCNode **, std::__1::allocator<SKCNode *> >=^^{SKCNode}}}@fB{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}{list<SKCAction *, std::__1::allocator<SKCAction *> >={__list_node_base<SKCAction *, void *>=^{__list_node_base<SKCAction *, void *>}^{__list_node_base<SKCAction *, void *>}}{__compressed_pair<unsigned long, std::__1::allocator<std::__1::__list_node<SKCAction *, void *> > >=L}}B@{shared_ptr<PKPath>=^{PKPath}^{__shared_weak_count}}IIBiffBB{?=[4]}{?=[4]}}8@0:4, name: _makeBackingNode

// Remaining properties
@property(copy, nonatomic) NSDictionary *attributeValues; // @dynamic attributeValues;

@end

