//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <objc/NSObject.h>

#import <NanoAudioControl/MPAVRoutingControllerDelegate-Protocol.h>
#import <NanoAudioControl/MPVolumeControllerDelegate-Protocol.h>
#import <NanoAudioControl/MediaControlsVolumeControllerObserver-Protocol.h>
#import <NanoAudioControl/NACVolumeController-Protocol.h>

@class MPAVRoute, MPAVRoutingController, MPVolumeController, MediaControlsVolumeController, NACEventThrottler, NSCountedSet, NSOrderedSet, NSString;
@protocol NACVolumeControllerDelegate, OS_dispatch_queue;

__attribute__((visibility("hidden")))
@interface NACVolumeControllerLocal : NSObject <MPVolumeControllerDelegate, MPAVRoutingControllerDelegate, MediaControlsVolumeControllerObserver, NACVolumeController>
{
    NSString *_audioCategory;
    MPAVRoute *_route;
    MPVolumeController *_volumeController;
    MPAVRoutingController *_routingController;
    NSCountedSet *_volumeSetHistory;
    NACEventThrottler *_volumeThrottler;
    NACEventThrottler *_hapticThrottler;
    _Bool _validCachedMutedValue;
    _Bool _muted;
    _Bool _shouldIgnoreHaptics;
    _Bool _monitoringHaptics;
    int _cachedHapticState;
    NSObject<OS_dispatch_queue> *_serialQueue;
    MediaControlsVolumeController *_mediaControlsVolumeController;
    NSOrderedSet *_lastNotifiedAvailableListeningModes;
    NSString *_lastNotifiedCurrentListeningMode;
    _Bool _systemMuted;
    id <NACVolumeControllerDelegate> _delegate;
}

@property(nonatomic, getter=isSystemMuted) _Bool systemMuted; // @synthesize systemMuted=_systemMuted;
@property(nonatomic) __weak id <NACVolumeControllerDelegate> delegate; // @synthesize delegate=_delegate;
- (void).cxx_destruct;
- (id)_volumeController;
- (void)_updateMutedStateFromVolumeController:(id)arg1;
- (void)_updateVolumeState;
@property(nonatomic, getter=isProminentHapticEnabled) _Bool prominentHapticEnabled;
- (void)playProminentHapticPreview;
- (void)playDefaultHapticPreview;
- (void)playPreview;
@property(nonatomic) float hapticIntensity;
- (void)_setHapticIntensity:(id)arg1;
- (void)endObservingHapticState;
- (void)beginObservingHapticState;
- (void)updateCachedHapticState;
@property(nonatomic) int hapticState;
- (void)mediaControlsVolumeController:(id)arg1 didUpdateSplitRoute:(_Bool)arg2;
- (void)routingControllerAvailableRoutesDidChange:(id)arg1;
- (void)volumeController:(id)arg1 volumeWarningStateDidChange:(int)arg2;
- (void)volumeController:(id)arg1 EUVolumeLimitDidChange:(float)arg2;
- (void)volumeController:(id)arg1 mutedStateDidChange:(_Bool)arg2;
- (void)volumeController:(id)arg1 volumeValueDidChange:(float)arg2;
- (void)volumeController:(id)arg1 volumeControlAvailableDidChange:(_Bool)arg2;
- (void)_ignoreHapticObservation;
- (id)_mediaControlsVolumeController;
@property(retain, nonatomic) NSString *currentListeningMode;
@property(readonly, nonatomic) NSOrderedSet *availableListeningModes;
- (void)allowUserToExceedEUVolumeLimit;
- (void)setVolumeValue:(float)arg1 muted:(_Bool)arg2 overrideEULimit:(_Bool)arg3;
- (void)setMuted:(_Bool)arg1;
- (void)_setVolumeValue:(id)arg1;
- (void)setVolumeValue:(float)arg1;
@property(readonly, nonatomic) int volumeWarningState;
@property(readonly, nonatomic, getter=isVolumeWarningEnabled) _Bool volumeWarningEnabled;
@property(readonly, nonatomic) float EUVolumeLimit;
@property(readonly, nonatomic, getter=isVolumeControlAvailable) _Bool volumeControlAvailable;
@property(readonly, nonatomic, getter=isMuted) _Bool muted;
@property(readonly, nonatomic) float volumeValue;
- (void)endObservingListeningModes;
- (void)beginObservingListeningModes;
- (void)endObservingHaptics;
- (void)beginObservingHaptics;
- (void)endObservingVolume;
- (void)beginObservingVolume;
- (id)_init;
- (id)initWithRoute:(id)arg1;
- (id)initWithAudioCategory:(id)arg1;
- (id)init;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

