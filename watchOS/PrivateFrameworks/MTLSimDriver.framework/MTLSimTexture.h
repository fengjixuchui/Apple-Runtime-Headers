//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <MTLSimDriver/MTLSimResource.h>

#import <MTLSimDriver/MTLSerializerResource-Protocol.h>
#import <MTLSimDriver/MTLSerializerTexture-Protocol.h>
#import <MTLSimDriver/MTLTexture-Protocol.h>
#import <MTLSimDriver/MTLTextureImplementation-Protocol.h>

@class MTLResourceAllocationInfo, MTLSimBuffer, NSString;
@protocol MTLBuffer, MTLDevice, MTLHeap, MTLResource, MTLTexture;

__attribute__((visibility("hidden")))
@interface MTLSimTexture : MTLSimResource <MTLSerializerTexture, MTLSerializerResource, MTLTexture, MTLTextureImplementation>
{
    MTLSimTexture *_parentTexture;
    unsigned int _parentRelativeLevel;
    unsigned int _parentRelativeSlice;
    MTLSimBuffer *_buffer;
    unsigned int _textureType;
    unsigned int _pixelFormat;
    unsigned int _decompressedPixelFormat;
    unsigned int _usage;
    MTLSimBuffer *_backingBuffer;
    unsigned long _backingBufferSize;
    id <MTLTexture> _decompressedTextureView;
    unsigned int _width;
    unsigned int _height;
    unsigned int _depth;
    unsigned int _mipmapLevelCount;
    unsigned int _sampleCount;
    unsigned int _arrayLength;
    unsigned int _numFaces;
    struct __IOSurface *_iosurface;
    unsigned int _iosurfacePlane;
    unsigned long long _bufferOffset;
    unsigned long long _bufferBytesPerRow;
    _Bool _allowGPUOptimizedContents;
    _Bool _framebufferOnly;
    unsigned int _swizzle;
    _Bool _isInternalTextureView;
    _Bool isCompressed;
    _Bool _isDrawable;
    unsigned int rotation;
    unsigned int iosurfacePlane;
    unsigned int _uniqueIdentifier;
    unsigned int parentRelativeSlice;
    id <MTLResource> rootResource;
}

+ (void)decompress:(const char *)arg1 expandedTex:(char *)arg2 srcFormat:(unsigned int)arg3 destFormat:(unsigned int)arg4 width:(unsigned int)arg5 height:(unsigned int)arg6 destRowBytes:(unsigned int)arg7 srcRowBytes:(unsigned int)arg8;
+ (unsigned int)getDecompressedFormat:(unsigned int)arg1;
@property(readonly) unsigned int usage; // @synthesize usage=_usage;
@property(readonly, getter=isFramebufferOnly) _Bool framebufferOnly; // @synthesize framebufferOnly=_framebufferOnly;
@property(readonly) _Bool allowGPUOptimizedContents; // @synthesize allowGPUOptimizedContents=_allowGPUOptimizedContents;
@property(readonly) id <MTLResource> rootResource; // @synthesize rootResource;
@property(readonly) unsigned int parentRelativeLevel; // @synthesize parentRelativeLevel=_parentRelativeLevel;
@property(readonly) _Bool isDrawable; // @synthesize isDrawable=_isDrawable;
@property(readonly) unsigned int parentRelativeSlice; // @synthesize parentRelativeSlice;
@property(readonly) unsigned int iosurfacePlane; // @synthesize iosurfacePlane;
@property(readonly) struct __IOSurface *iosurface; // @synthesize iosurface=_iosurface;
@property(readonly) unsigned int rotation; // @synthesize rotation;
@property(readonly) _Bool isCompressed; // @synthesize isCompressed;
@property(readonly) unsigned int textureType;
@property(readonly) unsigned int arrayLength;
@property(readonly) unsigned int mipmapLevelCount;
@property(readonly) unsigned int numFaces;
@property(readonly) unsigned int depth;
@property(readonly) unsigned int height;
@property(readonly) unsigned int width;
@property(readonly) unsigned int sampleCount;
@property(readonly) unsigned int decompressedPixelFormat;
@property(readonly) unsigned int pixelFormat;
@property(readonly) unsigned int swizzleKey; // @synthesize swizzleKey=_swizzle;
@property(readonly, nonatomic) CDStruct_a06f635e swizzle; // @dynamic swizzle;
- (id)newTextureViewWithPixelFormat:(unsigned int)arg1 textureType:(unsigned int)arg2 levels:(struct _NSRange)arg3 slices:(struct _NSRange)arg4 swizzle:(CDStruct_a06f635e)arg5;
- (void)didModifyData;
- (void)replaceRegion:(CDStruct_4e0934b9)arg1 mipmapLevel:(unsigned int)arg2 withBytes:(const void *)arg3 bytesPerRow:(unsigned int)arg4;
- (void)replaceRegion:(CDStruct_4e0934b9)arg1 mipmapLevel:(unsigned int)arg2 slice:(unsigned int)arg3 withBytes:(const void *)arg4 bytesPerRow:(unsigned int)arg5 bytesPerImage:(unsigned int)arg6;
- (id)newTextureViewWithPixelFormat:(unsigned int)arg1 textureType:(unsigned int)arg2 levels:(struct _NSRange)arg3 slices:(struct _NSRange)arg4;
- (id)newTextureViewWithPixelFormat:(unsigned int)arg1;
- (id)newTextureViewWithPixelFormatInternal:(unsigned int)arg1 isInternalTextureView:(_Bool)arg2;
- (id)newRemoteTextureViewForDevice:(id)arg1;
- (void)getBytes:(void *)arg1 bytesPerRow:(unsigned int)arg2 fromRegion:(CDStruct_4e0934b9)arg3 mipmapLevel:(unsigned int)arg4;
@property(readonly) unsigned int hazardTrackingMode;
- (void)getBytes:(void *)arg1 bytesPerRow:(unsigned int)arg2 bytesPerImage:(unsigned int)arg3 fromRegion:(CDStruct_4e0934b9)arg4 mipmapLevel:(unsigned int)arg5 slice:(unsigned int)arg6;
- (unsigned int)setPurgeableState:(unsigned int)arg1;
@property(readonly) unsigned int bufferBytesPerRow;
@property(readonly) unsigned int bufferOffset; // @dynamic bufferOffset;
@property(readonly) id <MTLTexture> parentTexture; // @dynamic parentTexture;
@property(readonly) id <MTLBuffer> buffer; // @dynamic buffer;
@property(readonly, copy) NSString *description;
- (id)formattedDescription:(unsigned int)arg1;
@property(readonly) unsigned int textureRef;
- (void)dealloc;
- (id)initWithTexture:(id)arg1 device:(id)arg2;
- (id)initWithDescriptor:(id)arg1 decompressedPixelFormat:(unsigned int)arg2 iosurface:(struct __IOSurface *)arg3 plane:(unsigned int)arg4 textureRef:(unsigned int)arg5 heap:(id)arg6 device:(id)arg7;
- (id)initWithBuffer:(id)arg1 offset:(unsigned int)arg2 bytesPerRow:(unsigned int)arg3 descriptor:(id)arg4 textureRef:(unsigned int)arg5;
- (id)initWithTexture:(id)arg1 pixelFormat:(unsigned int)arg2 decompressedPixelFormat:(unsigned int)arg3 textureRef:(unsigned int)arg4 isInternalTextureView:(_Bool)arg5;
- (id)initWithTexture:(id)arg1 pixelFormat:(unsigned int)arg2 decompressedPixelFormat:(unsigned int)arg3 textureType:(unsigned int)arg4 levels:(struct _NSRange)arg5 slices:(struct _NSRange)arg6 swizzle:(CDStruct_a06f635e)arg7 textureRef:(unsigned int)arg8 isInternalTextureView:(_Bool)arg9;
- (id)initWithTextureInternal:(id)arg1 pixelFormat:(unsigned int)arg2 decompressedPixelFormat:(unsigned int)arg3 textureType:(unsigned int)arg4 levels:(struct _NSRange)arg5 slices:(struct _NSRange)arg6 swizzle:(CDStruct_a06f635e)arg7 compressedView:(_Bool)arg8 textureRef:(unsigned int)arg9 isInternalTextureView:(_Bool)arg10;
- (unsigned int)calculateOffsetToRegion:(CDStruct_4e0934b9)arg1 level:(unsigned int)arg2 slice:(unsigned int)arg3;
- (void)decompressPlaceholder:(const char *)arg1 expandedTex:(char *)arg2 srcFormat:(unsigned int)arg3 destFormat:(unsigned int)arg4 width:(unsigned int)arg5 height:(unsigned int)arg6 destRowBytes:(unsigned int)arg7 srcRowBytes:(unsigned int)arg8;
@property(readonly) id <MTLTexture> decompressedTextureView;
@property(readonly) unsigned int uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(readonly) id <MTLBuffer> backingBuffer;
@property(readonly) int compressionFeedback; // @dynamic compressionFeedback;

// Remaining properties
@property(readonly) unsigned int allocatedSize;
@property(readonly) unsigned long long allocationID;
@property(readonly) MTLResourceAllocationInfo *cachedAllocationInfo;
@property(readonly) unsigned int cpuCacheMode;
@property(readonly, copy) NSString *debugDescription;
@property(readonly) id <MTLDevice> device;
@property(readonly) unsigned int hash;
@property(readonly) id <MTLHeap> heap;
@property(readonly) unsigned int heapOffset;
@property(copy) NSString *label;
@property(readonly) unsigned long long protectionOptions;
@property(nonatomic) unsigned long long resourceIndex;
@property(readonly) unsigned int resourceOptions;
@property(readonly) unsigned int resourceRef;
@property int responsibleProcess;
@property(readonly) MTLResourceAllocationInfo *sharedAllocationInfo;
@property(readonly) unsigned int storageMode;
@property(readonly) Class superclass;
@property(readonly) unsigned int unfilteredResourceOptions;

@end

