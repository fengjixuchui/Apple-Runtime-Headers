//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <CarouselServices/CSLSSession.h>

#import <Carousel/CSLSessionPersisting-Protocol.h>

@class NSDate, NSDateComponents, NSString;

@interface CSLSession : CSLSSession <CSLSessionPersisting>
{
    _Bool _dismissed;
    NSDate *_lastForegroundDate;
    _Bool _launchable;
    _Bool _persisted;
    _Bool _mutuallyExclusive;
    _Bool _managed;
    _Bool _schedulable;
    _Bool _requiresFGActiveInitiation;
    _Bool _autoEndSession;
    id _connection;
    int _pid;
    NSString *_startCalendarID;
    NSDateComponents *_startDateComponents;
    unsigned int _options;
    double _duration;
    double _cpuPercentage;
}

+ (id)sessionForBundleID:(id)arg1 withURL:(id)arg2 type:(int)arg3;
+ (id)sessionForBundleID:(id)arg1 type:(int)arg2;
+ (id)sessionForClientSession:(id)arg1 startDate:(id)arg2 options:(unsigned int)arg3 fromConnection:(id)arg4;
+ (id)sessionForClientSession:(id)arg1 fromConnection:(id)arg2;
+ (const char *)deleteSQL;
+ (const char *)upsertSQL;
+ (id)tablesToDrop:(id)arg1;
+ (const char *)selectAllSQL;
+ (void)upgradeProperties:(id)arg1;
+ (const char *)createSQL;
@property(readonly, nonatomic) unsigned int options; // @synthesize options=_options;
@property(readonly, nonatomic) NSDateComponents *startDateComponents; // @synthesize startDateComponents=_startDateComponents;
@property(readonly, nonatomic) NSString *startCalendarID; // @synthesize startCalendarID=_startCalendarID;
@property(readonly, nonatomic) _Bool autoEndSession; // @synthesize autoEndSession=_autoEndSession;
@property(readonly, nonatomic) _Bool requiresFGActiveInitiation; // @synthesize requiresFGActiveInitiation=_requiresFGActiveInitiation;
@property(readonly, nonatomic, getter=isSchedulable) _Bool schedulable; // @synthesize schedulable=_schedulable;
@property(readonly, nonatomic) double cpuPercentage; // @synthesize cpuPercentage=_cpuPercentage;
@property(readonly, nonatomic, getter=isManaged) _Bool managed; // @synthesize managed=_managed;
@property(readonly, nonatomic) double duration; // @synthesize duration=_duration;
@property(readonly, nonatomic, getter=isMutuallyExclusive) _Bool mutuallyExclusive; // @synthesize mutuallyExclusive=_mutuallyExclusive;
@property(readonly, nonatomic) int pid; // @synthesize pid=_pid;
@property(getter=isPersisted) _Bool persisted; // @synthesize persisted=_persisted;
@property(getter=isLaunchable) _Bool launchable; // @synthesize launchable=_launchable;
@property __weak id connection; // @synthesize connection=_connection;
- (void).cxx_destruct;
@property(readonly, nonatomic) _Bool isBlocked;
- (void)computeExpirationDateWithOffset:(double)arg1;
- (void)computeExpirationDate;
- (void)updateStartDate:(id)arg1;
- (_Bool)updateCalendarIfNecessary:(id)arg1;
- (void)_lock_updateStartDate:(id)arg1;
- (_Bool)shouldBeScheduled;
- (_Bool)shouldBeRunning;
- (_Bool)isRestartable;
- (id)endDate;
- (id)_lock_endDate;
@property(readonly, nonatomic) double remainingDuration;
- (_Bool)hasBackgroundDuration;
@property(readonly, copy) NSString *description;
@property(retain, nonatomic) NSDate *lastForegroundDate;
@property(nonatomic, getter=isDismissed) _Bool dismissed;
- (void)setOptions:(unsigned int)arg1;
- (void)setSchedulable:(_Bool)arg1;
- (void)setDuration:(double)arg1;
- (void)persist;
- (void)cancel;
- (void)end;
- (id)initForBundleID:(id)arg1 url:(id)arg2 type:(int)arg3;
- (id)initWithClientSession:(id)arg1 connection:(id)arg2;
- (id)initWithClientSession:(id)arg1 connection:(id)arg2 startDate:(id)arg3 options:(unsigned int)arg4;
@property(readonly, nonatomic) CSLSSession *clientSession;
- (void)updatePID;
- (void)_commonInitialization;
- (void)bindDeleteStatement:(struct sqlite3_stmt *)arg1;
- (void)bindUpsertStatement:(struct sqlite3_stmt *)arg1;
- (id)initWithSelectStatement:(struct sqlite3_stmt *)arg1;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

