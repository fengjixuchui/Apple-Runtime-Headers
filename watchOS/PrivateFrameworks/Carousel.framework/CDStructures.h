//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#pragma mark Function Pointers and Blocks

typedef void (*CDUnknownFunctionPointerType)(void); // return type and parameters are unknown

typedef void (^CDUnknownBlockType)(void); // return type and parameters are unknown

#pragma mark Named Structures

struct CATransform3D {
    float m11;
    float m12;
    float m13;
    float m14;
    float m21;
    float m22;
    float m23;
    float m24;
    float m31;
    float m32;
    float m33;
    float m34;
    float m41;
    float m42;
    float m43;
    float m44;
};

struct CGAffineTransform {
    float a;
    float b;
    float c;
    float d;
    float tx;
    float ty;
};

struct CGPoint {
    float x;
    float y;
};

struct CGRect {
    struct CGPoint origin;
    struct CGSize size;
};

struct CGSize {
    float width;
    float height;
};

struct CSLProcessTimes {
    double beginUserCPUElapsedTime;
    double beginSystemCPUElapsedTime;
    double beginIdleCPUElapsedTime;
    double beginApplicationCPUElapsedTime;
};

struct CSLStatusBarGlobalContextViewLayoutAttributes {
    float indicatorsRightMargin;
    float indicatorsLeftMargin;
    float pillInteriorPadding;
    float rightPadding;
    float pillRightPadding;
    float pillTopPadding;
    float pillHeight;
    float pillCornerRadius;
};

struct CSLTailSpinDiagnosticsRateLimitConfiguration {
    unsigned int maximumEvents;
    double window;
};

struct ContinuousBezier {
    struct vector<CGPoint, std::__1::allocator<CGPoint>> _points;
    struct vector<std::__1::vector<CGPoint, std::__1::allocator<CGPoint>>, std::__1::allocator<std::__1::vector<CGPoint, std::__1::allocator<CGPoint>>>> _controlPoints;
    struct vector<CGPoint, std::__1::allocator<CGPoint>> _casteljauPoints;
    float _length;
    struct vector<float, std::__1::allocator<float>> _arcLengths;
    struct vector<float, std::__1::allocator<float>> _normalizedArcLengths;
};

struct FBProcessExitContext {
    Class _field1;
};

struct Hex {
    int q;
    int r;
};

struct RaindropLayout {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
    float _field5;
};

struct TWRZoomParameters {
    int _field1;
    int _field2;
    int _field3;
    float _field4;
    float _field5;
};

struct UIEdgeInsets {
    float _field1;
    float _field2;
    float _field3;
    float _field4;
};

struct _NSRange {
    unsigned int location;
    unsigned int length;
};

struct __hash_map_const_iterator<std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>> {
    struct __hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> *_field1;
    } _field1;
};

struct __hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*> *__next_;
};

struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*> {
    struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*> *__next_;
};

struct __hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> {
    struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>*>>> __bucket_list_;
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>, std::__1::allocator<std::__1::__hash_node<CSL::Hex, void *>>> {
        struct __hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*> __value_;
    } __p1_;
    struct __compressed_pair<unsigned long, std::__1::hash<CSL::Hex>> {
        unsigned long __value_;
    } __p2_;
    struct __compressed_pair<float, std::__1::equal_to<CSL::Hex>> {
        float __value_;
    } __p3_;
};

struct _opaque_pthread_mutex_t {
    long __sig;
    char __opaque[40];
};

struct csl_bar_termination_payload {
    unsigned int version;
    unsigned int reason;
    unsigned int task_type;
    int allowance_ms;
    int elapsed_app_cpu_ms;
    int elapsed_userspace_cpu_ms;
    int elapsed_system_cpu_ms;
    int elapsed_app_cpu_percent;
    int elapsed_system_cpu_percent;
};

struct deque<CSLPressState, std::__1::allocator<CSLPressState>> {
    struct __split_buffer<CSLPressState *, std::__1::allocator<CSLPressState *>> {
        CDStruct_183601bc **__first_;
        CDStruct_183601bc **__begin_;
        CDStruct_183601bc **__end_;
        struct __compressed_pair<CSLPressState **, std::__1::allocator<CSLPressState *>> {
            CDStruct_183601bc **__value_;
        } __end_cap_;
    } __map_;
    unsigned int __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<CSLPressState>> {
        unsigned long __value_;
    } __size_;
};

struct deque<float, std::__1::allocator<float>> {
    struct __split_buffer<float *, std::__1::allocator<float *>> {
        float **__first_;
        float **__begin_;
        float **__end_;
        struct __compressed_pair<float **, std::__1::allocator<float *>> {
            float **__value_;
        } __end_cap_;
    } __map_;
    unsigned int __start_;
    struct __compressed_pair<unsigned long, std::__1::allocator<float>> {
        unsigned long __value_;
    } __size_;
};

struct os_state_data_decoder_s {
    char _field1[64];
    char _field2[64];
};

struct os_state_data_s {
    unsigned int _field1;
    union {
        unsigned int :32;
        unsigned int _field1;
    } _field2;
    struct os_state_data_decoder_s _field3;
    char _field4[64];
    unsigned char _field5[0];
};

struct os_state_hints_s {
    unsigned int _field1;
    char *_field2;
    unsigned int _field3;
    unsigned int _field4;
};

struct os_unfair_lock_s {
    unsigned int _os_unfair_lock_opaque;
};

struct os_unfair_recursive_lock_s {
    struct os_unfair_lock_s ourl_lock;
    unsigned int ourl_count;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<CSL::Hex, void *>*>*>> {
                unsigned long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>*>> {
                unsigned long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>*>> {
                unsigned long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>*>>> {
    struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>*>>> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*> **__value_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>*>> {
                unsigned long __value_;
            } __data_;
        } __value_;
    } __ptr_;
};

struct unordered_map<CSL::Hex, CSLHexAppNode *__unsafe_unretained, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, CSLHexAppNode *__unsafe_unretained>>> {
    struct __hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::hash<CSL::Hex>, true>> {
            unsigned long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, std::__1::equal_to<CSL::Hex>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<CSL::Hex, CSLHexLayoutAttributes, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, CSLHexLayoutAttributes>>> {
    struct __hash_table<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::hash<CSL::Hex>, true>> {
            unsigned long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, CSLHexLayoutAttributes>, std::__1::equal_to<CSL::Hex>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_map<CSL::Hex, int, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<std::__1::pair<const CSL::Hex, int>>> {
    struct __hash_table<std::__1::__hash_value_type<CSL::Hex, int>, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>, std::__1::allocator<std::__1::__hash_value_type<CSL::Hex, int>>> {
        struct unique_ptr<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, int>, void *>*> __value_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::hash<CSL::Hex>, true>> {
            unsigned long __value_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<CSL::Hex, std::__1::__hash_value_type<CSL::Hex, int>, std::__1::equal_to<CSL::Hex>, true>> {
            float __value_;
        } __p3_;
    } __table_;
};

struct unordered_multiset<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> {
    struct __hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> __table_;
};

struct unordered_set<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> {
    struct __hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> _field1;
};

struct vector<CGPoint, std::__1::allocator<CGPoint>> {
    struct CGPoint *__begin_;
    struct CGPoint *__end_;
    struct __compressed_pair<CGPoint *, std::__1::allocator<CGPoint>> {
        struct CGPoint *__value_;
    } __end_cap_;
};

struct vector<float, std::__1::allocator<float>> {
    float *__begin_;
    float *__end_;
    struct __compressed_pair<float *, std::__1::allocator<float>> {
        float *__value_;
    } __end_cap_;
};

struct vector<std::__1::vector<CGPoint, std::__1::allocator<CGPoint>>, std::__1::allocator<std::__1::vector<CGPoint, std::__1::allocator<CGPoint>>>> {
    struct vector<CGPoint, std::__1::allocator<CGPoint>> *__begin_;
    struct vector<CGPoint, std::__1::allocator<CGPoint>> *__end_;
    struct __compressed_pair<std::__1::vector<CGPoint, std::__1::allocator<CGPoint>>*, std::__1::allocator<std::__1::vector<CGPoint, std::__1::allocator<CGPoint>>>> {
        struct vector<CGPoint, std::__1::allocator<CGPoint>> *__value_;
    } __end_cap_;
};

struct vm_statistics64 {
    unsigned int free_count;
    unsigned int active_count;
    unsigned int inactive_count;
    unsigned int wire_count;
    unsigned long long zero_fill_count;
    unsigned long long reactivations;
    unsigned long long pageins;
    unsigned long long pageouts;
    unsigned long long faults;
    unsigned long long cow_faults;
    unsigned long long lookups;
    unsigned long long hits;
    unsigned long long purges;
    unsigned int purgeable_count;
    unsigned int speculative_count;
    unsigned long long decompressions;
    unsigned long long compressions;
    unsigned long long swapins;
    unsigned long long swapouts;
    unsigned int compressor_page_count;
    unsigned int throttled_count;
    unsigned int external_page_count;
    unsigned int internal_page_count;
    unsigned long long total_uncompressed_pages_in_compressor;
};

#pragma mark Typedef'd Structures

typedef struct {
    _Bool airplaneModeEnabled;
    _Bool chargingEnabled;
    _Bool doNotDisturbEnabled;
    _Bool downtimeEnabled;
    _Bool firstPartyNavigationEnabled;
    _Bool firstPartyWorkoutEnabled;
    _Bool internetReachable;
    _Bool lockedEnabled;
    _Bool navigationEnabled;
    _Bool nikeWorkoutEnabled;
    _Bool notificationsEnabled;
    _Bool nowPlayingEnabled;
    _Bool phoneCallEnabled;
    _Bool phoneReachable;
    _Bool physicalTherapyEnabled;
    _Bool recordingEnabled;
    _Bool registeringOrRegistered;
    _Bool simInserted;
    _Bool tinCanAvailabilityEnabled;
    _Bool theaterEnabled;
    _Bool waterLockEnabled;
    _Bool workoutEnabled;
} CDStruct_daf30f2e;

typedef struct {
    _Bool hasValidSnapshot;
    unsigned int slotID;
} CDStruct_cbf5dcb2;

typedef struct {
    unsigned long _field1;
    id *_field2;
    unsigned long *_field3;
    unsigned long _field4[5];
} CDStruct_11f37819;

typedef struct {
    unsigned int _field1[8];
} CDStruct_6ad76789;

typedef struct {
    unsigned long long *list;
    unsigned int count;
    unsigned int size;
} CDStruct_cb16bb10;

typedef struct {
    double _field1;
    double _field2;
} CDStruct_c3b9c2ee;

typedef struct {
    float _float3__percentComplete;
} CDStruct_727cf631;

typedef struct CDStruct_183601bc;

typedef struct {
    double _field1;
    struct Hex _field2;
    _Bool _field3;
    double _field4;
    CDStruct_727cf631 _field5;
} CDStruct_31feac45;

// Ambiguous groups
typedef struct {
    unsigned int timestamp:1;
    unsigned int reason:1;
    unsigned int development:1;
} CDStruct_4a980f94;

typedef struct {
    unsigned int elapsedTime:1;
    unsigned int reason:1;
} CDStruct_bf988747;

typedef struct {
    unsigned int timestamp:1;
} CDStruct_b5306035;

typedef struct __hash_map_const_iterator<std::__1::__hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*>> {
    struct __hash_const_iterator<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> {
        struct __hash_node_base<std::__1::__hash_node<std::__1::__hash_value_type<CSL::Hex, CSLHexAppNode *__unsafe_unretained>, void *>*> *_field1;
    } _field1;
} __hash_map_const_iterator_1158cf8f;

typedef struct unordered_set<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> {
    struct __hash_table<CSL::Hex, std::__1::hash<CSL::Hex>, std::__1::equal_to<CSL::Hex>, std::__1::allocator<CSL::Hex>> _field1;
} unordered_set_9c9f31f2;

