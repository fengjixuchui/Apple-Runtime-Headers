//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <NanoCalendarServices/NCSEventStoreObserver.h>

@class NSArray, NSMutableArray, NSObject, NSTimer, NSURL;
@protocol OS_dispatch_queue;

@interface NCSUpcomingEventsListener : NCSEventStoreObserver
{
    NSObject<OS_dispatch_queue> *_refreshQueue;
    NSMutableArray *_upcomingTodayEvents;
    NSMutableArray *_todayEvents;
    NSMutableArray *_tomorrowEvents;
    NSTimer *_updateTimer;
    _Bool _reporting;
    _Bool _firstInDay;
    _Bool _overbooked;
    NSArray *_upcomingEvents;
    NSURL *_launchURL;
    CDUnknownBlockType _refinementBlock;
    unsigned int _searchRange;
    CDUnknownBlockType _updateBlock;
}

+ (id)_dateFor5PMTomorrow;
+ (id)splitDateBetweenEvent:(id)arg1 andEvent:(id)arg2;
+ (id)nanoCalendarLaunchURLForDate:(id)arg1;
+ (id)nanoCalendarLaunchURLForEvent:(id)arg1;
- (void).cxx_destruct;
@property(copy, nonatomic) CDUnknownBlockType updateBlock; // @synthesize updateBlock=_updateBlock;
@property(readonly, nonatomic) NSMutableArray *todayEvents; // @synthesize todayEvents=_todayEvents;
@property(readonly, nonatomic) NSMutableArray *tomorrowEvents; // @synthesize tomorrowEvents=_tomorrowEvents;
@property(readonly, nonatomic) NSMutableArray *upcomingTodayEvents; // @synthesize upcomingTodayEvents=_upcomingTodayEvents;
@property(nonatomic) unsigned int searchRange; // @synthesize searchRange=_searchRange;
@property(copy, nonatomic) CDUnknownBlockType refinementBlock; // @synthesize refinementBlock=_refinementBlock;
@property(nonatomic, getter=isOverbooked) _Bool overbooked; // @synthesize overbooked=_overbooked;
@property(nonatomic, getter=isFirstInDay) _Bool firstInDay; // @synthesize firstInDay=_firstInDay;
@property(retain, nonatomic) NSURL *launchURL; // @synthesize launchURL=_launchURL;
@property(retain, nonatomic) NSArray *upcomingEvents; // @synthesize upcomingEvents=_upcomingEvents;
- (id)_dateForBeginningOfTomorrow;
- (id)_dateForEndOfToday;
- (id)_dateForBeginningOfToday;
- (id)_dateForNow;
- (_Bool)_isEvent:(id)arg1 overlappingEvent:(id)arg2;
- (_Bool)_doesEvent:(id)arg1 overlapAnyEventsIn:(id)arg2;
- (_Bool)_isEvent:(id)arg1 equivalentToEvent:(id)arg2;
- (_Bool)_shouldExcludeEvent:(id)arg1 allowAllDayEvents:(_Bool)arg2;
- (_Bool)_doesListOfEvents:(id)arg1 containEquivalentForEvent:(id)arg2;
- (_Bool)_isListOfEvents:(id)arg1 equivalentToListOfEvents:(id)arg2;
- (id)_selectedCalendars;
- (void)_localeChanged;
- (void)_selectedCalendarsChanged:(id)arg1;
- (void)_significantTimeChange:(id)arg1;
- (void)_todayChanged:(id)arg1;
- (void)stopObserving;
- (void)startObserving;
- (void)_resetAllEvents;
- (void)_releaseAllEvents;
- (void)eventStoreWillClose;
- (void)databaseChanged:(id)arg1;
- (void)_resetTimers;
- (void)_updateTimerDidFire:(id)arg1;
- (void)_scheduleUpdateTimerForDate:(id)arg1;
- (void)_reportEventsIfAllowed;
- (id)_loadEventsForSelectedCalendars:(id)arg1 inDateRange:(id)arg2 allowAllDay:(_Bool)arg3;
- (id)_loadTodayEventsForSelectedCalendars:(id)arg1;
- (id)_loadTomorrowEventsForSelectedCalendars:(id)arg1;
- (id)_internalRefineEventsAndGetUpdateTimerFireDate:(id)arg1;
- (void)_trimStaleEventsFrom:(id)arg1;
- (id)_loadUpcomingTodayEventsForSelectedCalendars:(id)arg1;
- (id)loadTodayEventsIfNecessary:(id)arg1;
- (id)loadTomorrowEventsIfNecessary:(id)arg1;
- (id)loadUpcomingTodayEventsIfNecessary:(id)arg1;
- (void)_evaluateEventsAndReportIfAllowed:(id)arg1;
- (void)_reloadAllEvents;
- (void)stopReportingUpcomingEvents;
- (void)startReportingUpcomingEventsWithBlock:(CDUnknownBlockType)arg1;
- (void)dealloc;
- (id)init;

@end

