//
//     Generated by class-dump 3.5 (64 bit) (Debug version compiled Oct 15 2018 10:31:50).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2015 by Steve Nygard.
//

#import <AccessibilityUtilities/AXSettings.h>

@class NPSDomainAccessor;

@interface AXTimeOutputPreferences : AXSettings
{
    NPSDomainAccessor *_domainAccessor;
}

+ (id)sharedInstance;
- (void).cxx_destruct;
- (id)localizedStringForTapticTimeEncoding:(int)arg1;
- (id)tapticTimeModeLocalizedDescription;
- (id)tapticTimeLocalizedCurrentMode;
- (id)tapticTimeLocalizedDescription;
- (id)tapticTimeLocalizedTitle;
- (id)localizedStringForTapToSpeakTimeAvailability:(int)arg1;
- (id)tapToSpeakTimeLocalizedDescription;
- (id)tapToSpeakTimeLocalizedTitle;
- (id)localizedStringForTapticChimesSoundType:(int)arg1;
- (id)localizedStringForTapticChimesFrequencyEncoding:(int)arg1;
- (id)tapticChimesSoundsLocalizedTitle;
- (id)tapticChimesScheduleLocalizedTitle;
- (id)tapticChimesLocalizedCurrentSounds;
- (id)tapticChimesLocalizedCurrentFrequency;
- (id)tapticChimesLocalizedDescription;
- (id)tapticChimesLocalizedTitle;
- (id)localizedStringForKey:(id)arg1;
- (id)tapticTimeEncodingOptions;
- (id)tapToSpeakAvailabilityOptions;
- (id)tapticChimesSoundsOptions;
- (id)tapticChimesFrequencyOptions;
- (void)setVoiceOverTapticChimesSoundType:(int)arg1;
- (int)voiceOverTapticChimesSoundType;
- (void)setVoiceOverTapticChimesFrequencyEncoding:(int)arg1;
- (int)voiceOverTapticChimesFrequencyEncoding;
- (void)setVoiceOverTapticChimesEnabled:(_Bool)arg1;
- (_Bool)voiceOverTapticChimesEnabled;
- (void)setVoiceOverTapticTimeEncoding:(int)arg1;
- (int)voiceOverTapticTimeEncoding;
- (void)setVoiceOverTapticTimeMode:(_Bool)arg1;
- (_Bool)voiceOverTapticTimeMode;
- (void)setTapToSpeakTimeAvailability:(int)arg1;
- (int)tapToSpeakTimeAvailability;
- (void)setTapToSpeakTimeEnabled:(_Bool)arg1;
- (_Bool)tapToSpeakTimeEnabled;
- (_Bool)_voiceOverIsInTripleClick;
- (_Bool)_voiceOverIsEnabled;
- (int)_npsIntegerValueForPreferenceKey:(id)arg1 defaultValue:(int)arg2;
- (_Bool)_npsBoolValueForPreferenceKey:(id)arg1 defaultValue:(_Bool)arg2;
- (void)_setNPSValue:(id)arg1 preferenceKey:(id)arg2;
- (id)_npsValueForPreferenceKey:(id)arg1 expectedClass:(Class)arg2;
- (id)_npsValueForPreferenceKey:(id)arg1;
@property(readonly, nonatomic) NPSDomainAccessor *domainAccessor; // @synthesize domainAccessor=_domainAccessor;

@end

